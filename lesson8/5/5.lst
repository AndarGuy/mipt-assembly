     1                                  ; Вычислить значение z
     2                                  
     3                                  ; z=10*a/(a+b)+10*b/(c+d)
     4                                  
     5                                  ; a, b, c – байт
     6                                  ; d        - слово
     7                                  
     8                                  global _main
     9                                  
    10                                  default rel
    11                                  
    12                                  extern _printf
    13                                  
    14                                  section .data
    15 00000000 46                      a               db      70
    16 00000001 03                      b               db      3
    17 00000002 0A                      c               db      10
    18 00000003 E803                    d               dw      1000
    19                                  
    20 00000005 7A203D2025640A00        output_format   db      "z = %d", 0xA, 0x0
    21                                  
    22                                  section .bss
    23 00000000 ????                    z               resw    1
    24                                  
    25                                  section .text
    26                                  
    27                                  _main:
    28 00000000 55                          push    rbp                     ; save stack
    29                                  
    30 00000001 66C705(00000000)00-         mov     [z], word 0x0           ; z = 0
    30 00000009 00                 
    31                                      
    32 0000000A 6631C0                      xor     ax, ax                  ; clean ax
    33 0000000D 8A05(00000000)              mov     al, [a]                 ; ax = a
    34 00000013 66BB0A00                    mov     bx, 10                  ; bx = 10
    35 00000017 66F7EB                      imul    bx                      ; dx:ax = ax * bx
    36                                      
    37 0000001A 6631DB                      xor     bx, bx                  ; bx = 0
    38 0000001D 021D(00000000)              add     bl, [a]
    39 00000023 021D(01000000)              add     bl, [b]
    40 00000029 66F7FB                      idiv    bx
    41                                  
    42 0000002C 660105(00000000)            add     [z], ax
    43                                  
    44 00000033 6631C0                      xor     ax, ax                  ; clean ax
    45 00000036 8A05(01000000)              mov     al, [b]                 ; ax = b
    46 0000003C 66BB0A00                    mov     bx, 10                  ; bx = 10
    47 00000040 66F7EB                      imul    bx                      ; ax = ax * bx
    48                                      
    49 00000043 6631DB                      xor     bx, bx                  ; ebx = 0
    50 00000046 021D(02000000)              add     bl, [c]
    51 0000004C 66031D(03000000)            add     bx, [d]
    52 00000053 66F7FB                      idiv    bx
    53                                  
    54 00000056 660105(00000000)            add     [z], ax
    55                                  
    56                                      ; print
    57 0000005D 48BF-                       mov             rdi, output_format
    57 0000005F [0500000000000000] 
    58 00000067 0FBF35(00000000)            movsx           esi, word [z]
    59 0000006E B800000000                  mov             rax, 0          ; no floating point
    60 00000073 E8(00000000)                call            _printf         ; printf(“%d   %d\n”, x, *xp);
    61                                    
    62 00000078 5D                          pop	rbp                         ; restore stack
    63                                      
    64 00000079 B801000002                  mov       rax, 0x2000000 + 0x1  ; 1 = exit
    65 0000007E BF00000000                  mov       rdi, 0                ; 0 = success exit code
    66 00000083 0F05                        syscall                         ; quit
    67                                  
    68                                  
    69                                   
